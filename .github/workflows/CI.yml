name: CI

on:
  pull_request:
    branches: [master, nightly]
    types: [opened, synchronize, reopened]
  push:
    branches: [master, nightly]
  workflow_dispatch:

jobs:
  check_changelog:
    name: Check Changelog
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
      uses: actions/checkout@v3

    - name: Verify Changelog
      id: verify_changelog
      if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
      # base_ref for pull request check, ref for push
      uses: RetroArcher/actions/verify_changelog@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      next_version: ${{ steps.verify_changelog.outputs.changelog_parser_version }}
      last_version: ${{ steps.verify_changelog.outputs.latest_release_tag_name }}
      release_body:  ${{ steps.verify_changelog.outputs.changelog_parser_description }}

  version_check:
    runs-on: ubuntu-latest
    needs: check_changelog

    steps:
      - name: Checkout
        if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
        uses: actions/checkout@v3

      - name: Install Python 3.9
        if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
        uses: actions/setup-python@v4  # https://github.com/actions/setup-python
        with:
          python-version: '3.9'

      - name: Set up Python 3.9 Dependencies
        if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
        run: |
          echo "Installing RetroArcher Requirements"
          python -m pip install --upgrade pip setuptools
          python -m pip install -r requirements.txt --no-warn-script-location

      - name: Get version
        if: ${{ github.ref == 'refs/heads/master' || github.base_ref == 'master' }}
        run: |
          OUTPUT=$(python ./retroarcher.py --version)
          echo "pyra_version=${OUTPUT}" >> $GITHUB_ENV

      - name: Compare versions
        if: ( env.pyra_version != needs.check_changelog.outputs.next_version ) && ( github.ref == 'refs/heads/master' || github.base_ref == 'master' )
        run: |
          echo "Version number in pyra/version.py does not match version in CHANGELOG.md"
          exit 1

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019, ubuntu-18.04, macos-10.15]
        architecture: [x64]
        include: # additional runs
        - os: windows-2019
          architecture: x86

    runs-on: ${{ matrix.os }}
    needs: [check_changelog, version_check]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Python 3.9
        uses: actions/setup-python@v4  # https://github.com/actions/setup-python
        with:
          python-version: '3.9'
          architecture: ${{ matrix.architecture }}

      - name: Set up Python 3.9 Dependencies
        run: |
          echo "Installing RetroArcher Requirements"
          python -m pip install --upgrade pip setuptools
          python -m pip install -r requirements-dev.txt --no-warn-script-location

      - name: Compile Locale Translations
        run: |
          python ./scripts/_locale.py --compile

      - name: Compile Docs
        run: |
          cd docs
          make html

      - name: Build pyinstaller package
        run: |
          python ./scripts/build.py

      - name: Upload Artifacts
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3  # https://github.com/actions/upload-artifact
        with:
          name: RetroArcher_${{ runner.os }}_${{ matrix.architecture }}
          if-no-files-found: error  # 'warn' or 'ignore' are also available, defaults to `warn`
          path: |
            ${{ github.workspace }}/dist

      - name: Package Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          7z a "./RetroArcher_${{ runner.os }}_${{ matrix.architecture }}.zip" "dist"

      - name: Create/Update GitHub Release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: ncipollo/release-action@v1  # https://github.com/ncipollo/release-action
        with:
          name: ${{ needs.check_changelog.outputs.next_version }}
          tag: ${{ needs.check_changelog.outputs.next_version }}
          artifacts: "*.zip"
          token: ${{ secrets.GH_PAT }}
          allowUpdates: true
          body: ${{ needs.check_changelog.outputs.release_body }}
          discussionCategory: Announcements

  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    needs: [check_changelog, version_check]

    env:
      BASE_TAG: retroarcher/retroarcher

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare
        id: prepare
        env:
          NEXT_VERSION: ${{ needs.check_changelog.outputs.next_version }}
        run: |
          # determine to push image to dockerhub and ghcr or not
          if [[ $GITHUB_EVENT_NAME == "push" ]]; then
            PUSH=true
          else
            PUSH=false
          fi

          # setup the tags
          TAGS="${BASE_TAG}:${GITHUB_SHA:0:7},ghcr.io/${BASE_TAG}:${GITHUB_SHA:0:7}"

          if [[ $GITHUB_REF == refs/heads/master ]]; then
            TAGS="${TAGS},${BASE_TAG}:latest,ghcr.io/${BASE_TAG}:latest"
            TAGS="${TAGS},${BASE_TAG}:master,ghcr.io/${BASE_TAG}:master"
          elif [[ $GITHUB_REF == refs/heads/nightly ]]; then
            TAGS="${TAGS},${BASE_TAG}:nightly,ghcr.io/${BASE_TAG}:nightly"
          else
            TAGS="${TAGS},${BASE_TAG}:test,ghcr.io/${BASE_TAG}:test"
          fi

          if [[ ${NEXT_VERSION} != "" ]]; then
            TAGS="${TAGS},${BASE_TAG}:${NEXT_VERSION},ghcr.io/${BASE_TAG}:${NEXT_VERSION}"
          fi

          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=commit::${GITHUB_SHA}
          echo ::set-output name=platforms::linux/386,linux/amd64
          echo ::set-output name=push::${PUSH}
          echo ::set-output name=tags::${TAGS}

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        if: ${{ steps.prepare.outputs.push == 'true' }}  # PRs do not have access to secrets
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Log in to the Container registry
        if: ${{ steps.prepare.outputs.push == 'true' }}  # PRs do not have access to secrets
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: ${{ steps.prepare.outputs.push }}
          platforms: ${{ steps.prepare.outputs.platforms }}
          build-args: |
            BRANCH=${{ steps.prepare.outputs.branch }}
            COMMIT=${{ steps.prepare.outputs.commit }}
            BUILD_DATE=${{ steps.prepare.outputs.build_date }}
          tags: ${{ steps.prepare.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Update Docker Hub Description
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}  # token is not currently supported
          repository: ${{ env.BASE_TAG }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./DOCKER_README.md
